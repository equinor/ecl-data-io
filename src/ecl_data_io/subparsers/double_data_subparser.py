from dataclasses import dataclass
from itertools import takewhile
from typing import List

from ecl_data_io.errors import ParsingError

from .record import Record
from .split_line import split_line


class DoubleDataSubParser:
    def __init__(self, keyword):
        self.keyword = keyword

    def match(self, line):
        return line[0 : min(len(line), 8)].rstrip() == self.keyword

    def parse(self, super_parser, lines):
        try:
            contents = [[]]
            while True:
                for word in split_line(next(lines)):
                    if word[0] == "/":
                        if contents[-1]:
                            contents.append([])
                        else:
                            yield Record(self.keyword, contents)
                            return
                    contents[-1].append(word)

        except StopIteration as e:
            raise ParsingError(
                f"Reached end of file while parsing keyword {self.keyword}"
            ) from e


double_data_keywords = [
    "ADD",
    "ADDREG",
    "ADDZCORN",
    "AJGWELLS",
    "AMALGAM",
    "AQANCONL",
    "AQANNC",
    "AQANTRC",
    "AQSTREAM",
    "AQSTREAW",
    "AQUALIST",
    "AQUANCON",
    "AQUCHGAS",
    "AQUCHWAT",
    "AQUCON",
    "AQUCT",
    "AQUFETP",
    "AQUFLUX",
    "AQUNNC",
    "AQUNUM",
    "ASPPW2D",
    "AUTOCOAR",
    "BRANPROP",
    "CECON",
    "COALNUMR",
    "COARSEN",
    "COLLAPSE",
    "COMPAGH",
    "COMPAGHL",
    "COMPDAT",
    "COMPDATL",
    "COMPDATM",
    "COMPFLSH",
    "COMPIMB",
    "COMPINJK",
    "COMPKRI",
    "COMPKRIL",
    "COMPLMPL",
    "COMPLUMP",
    "COMPMBIL",
    "COMPMOBI",
    "COMPORD",
    "COMPRIV",
    "COMPRP",
    "COMPRPL",
    "COMPSEGL",
    "COMPSEGS",
    "CONDFLTS",
    "CONDFRAC",
    "COPY",
    "COPYBOX",
    "COPYREG",
    "CPIFACT",
    "CPIFACTL",
    "CRNDENS",
    "CSKIN",
    "DATES",
    "DATUMRX",
    "DIFFCBM",
    "EDITNNCR",
    "EPSDBGS",
    "EQLZCORN",
    "EQUALREG",
    "EQUALS",
    "FAULTS",
    "FIELDSEP",
    "FIPSEP",
    "GADVANCE",
    "GASFCOMP",
    "GCALECON",
    "GCONCOAL",
    "GCONENG",
    "GCONINJE",
    "GCONPRI",
    "GCONPROD",
    "GCONSALE",
    "GCONSUMP",
    "GCUTBACK",
    "GCUTBACT",
    "GDCQ",
    "GDCQECON",
    "GDRILPOT",
    "GECON",
    "GEFAC",
    "GETSOL",
    "GINJGAS",
    "GLIFTLIM",
    "GLIFTOPT",
    "GNETDP",
    "GNETINJE",
    "GNETPUMP",
    "GPMAINT",
    "GPMAINT3",
    "GQUALITY",
    "GRADGRUP",
    "GRADRESV",
    "GRADRFT",
    "GRADWELL",
    "GRDREACH",
    "GRUPFUEL",
    "GRUPGR",
    "GRUPINJE",
    "GRUPLIM",
    "GRUPMAST",
    "GRUPNET",
    "GRUPPROD",
    "GRUPRIG",
    "GRUPSALE",
    "GRUPSLAV",
    "GRUPTARG",
    "GRUPTREE",
    "GSATCOMP",
    "GSATINJE",
    "GSATPROD",
    "GSEPCOND",
    "GSEPREPT",
    "GSWINGF",
    "GTADD",
    "GTMULT",
    "GWRTWCV",
    "HEATER",
    "HEATERL",
    "HMAQUCT",
    "HMAQUFET",
    "HMAQUNUM",
    "HMFAULTS",
    "HMMLAQUN",
    "HMMLCTAQ",
    "HMMLFTAQ",
    "HMMLTWCN",
    "HMMMREGT",
    "HMMROCK",
    "HMMROCKT",
    "HMMULRGT",
    "HMMULTFT",
    "HMWELCON",
    "HMWPIMLT",
    "IHOST",
    "LGRFREE",
    "LGRLOCK",
    "LICENSES",
    "LSCRITS",
    "LUMPING",
    "MAXVALUE",
    "MINVALUE",
    "MULTFLT",
    "MULTIPLY",
    "MULTREG",
    "MULTREGD",
    "MULTREGH",
    "MULTREGP",
    "MULTREGT",
    "NCONSUMP",
    "NEFAC",
    "NETCOMPA",
    "NGASREM",
    "NNC",
    "NNCGEN",
    "NODEPROP",
    "NWATREM",
    "OPERATE",
    "OPERATER",
    "OPTCONS",
    "OPTFUNC",
    "OPTPARS",
    "PATHS",
    "PECOEFS",
    "PEGTAB0",
    "PEGTAB1",
    "PEGTAB2",
    "PEGTAB3",
    "PEGTAB4",
    "PEGTAB5",
    "PEGTAB6",
    "PEGTAB7",
    "PEKTAB0",
    "PEKTAB1",
    "PEKTAB2",
    "PEKTAB3",
    "PEKTAB4",
    "PEKTAB5",
    "PEKTAB6",
    "PEKTAB7",
    "PSPLITX",
    "PSPLITY",
    "REACHES",
    "RIVDEBUG",
    "RIVERSYS",
    "RIVRPROP",
    "RIVSALT",
    "RIVTRACE",
    "ROCKCON",
    "ROCKCONL",
    "ROCKPAME",
    "ROCKPROP",
    "RPRKPAME",
    "RPTHMG",
    "RPTHMW",
]
